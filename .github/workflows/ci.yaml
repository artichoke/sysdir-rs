---
name: CI
"on":
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk
  schedule:
    - cron: "0 0 * * WED"
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, macos-11, macos-12, macos-13]
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/build-and-test@v1.11.0
        with:
          toolchain: stable

      - name: Compile
        run: cargo build --verbose

      - name: Compile tests
        run: cargo test --no-run

      - name: Test
        run: cargo test

      - name: Test with all features
        run: cargo test --all-features

      - name: Test with no default features
        run: cargo test --no-default-features

      - name: Check example
        run: cargo check --examples

      - name: Build examples
        run: cargo build --examples

      - name: Run example
        run: cargo run --example enumerate_system_dirs -q

  build-msrv:
    name: Build (MSRV)
    runs-on: macos-latest
    env:
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/build-and-test@v1.11.0
        with:
          toolchain: "1.64.0"

      - name: Compile
        run: cargo build --verbose

  build-non-apple:
    name: Build (non-Apple platforms)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/build-and-test@v1.11.0
        with:
          toolchain: stable

      - name: Compile
        run: cargo build --verbose

      - name: Compile tests
        run: cargo test --no-run

      - name: Test
        run: cargo test

      - name: Test with all features
        run: cargo test --all-features

      - name: Test with no default features
        run: cargo test --no-default-features

      - name: Build documentation
        run: cargo doc

      - name: Check example
        run: cargo check --examples

      - name: Build examples
        run: cargo build --examples

      - name: Run example
        shell: bash
        run: |
          error_code="0"
          cargo run --example enumerate_system_dirs -q || error_code="$?"
          [[ "$error_code" == "1" ]]

  rust:
    name: Lint and format Rust
    runs-on: macos-latest
    env:
      RUSTFLAGS: -D warnings
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Install Rust toolchain
        uses: artichoke/setup-rust/lint-and-format@v1.11.0
        with:
          toolchain: stable

      - name: Check formatting
        run: cargo fmt --check

      - name: Lint with Clippy
        run: cargo clippy --workspace --all-features --all-targets

  ruby:
    name: Lint and format Ruby
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Install Ruby toolchain
        uses: ruby/setup-ruby@d4526a55538b775af234ba4af27118ed6f8f6677 # v1.172.0
        with:
          ruby-version: ".ruby-version"
          bundler-cache: true

      - name: Lint and check formatting with Rubocop
        run: bundle exec rubocop --format github

  c:
    name: Lint and format C
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Setup Node.js runtime
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "lts/*"

      - name: Install toolchain
        run: npm ci

      - name: Lint and check formatting with clang-format
        run: npm run fmt:c -- --check

  text:
    name: Lint and format text
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Setup Node.js runtime
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "lts/*"

      - name: Install toolchain
        run: npm ci

      - name: Format with prettier
        run: npx prettier --check '**/*'

      - name: Lint YAML sources with yamllint
        run: |
          yamllint --version
          echo "Linting YAML sources with yamllint ..."
          yamllint --strict --format github .
          echo "OK"
